package cg41;

import java.sql.SQLException;

public class RemoveCompletedCourse extends javax.swing.JFrame {

    int thisError, i, numRecords, courseID, thisError2;
    String governor, myLocalString, myGov, myGovArray[], myCompCourseArray[];
    String compCourseEntry, courseName, myCompCourse;
    boolean myLocalError;

    /** Creates new form RemoveCompletedCourse */
    public RemoveCompletedCourse() {
        initComponents();
        loadGovernors();
    }

    /**
     * Method used to load the governors into the combo box
     */
    private void loadGovernors() {
        CG41App.dbObject.sqlString = "select COUNT(*) from governor"; //count governors
        thisError = CG41App.dbObject.getCountBySelect(); //execute count
        numRecords = CG41App.dbObject.NumberOfRecords; //store the amount of governors
        //create a select statement to get all the governor records
        CG41App.dbObject.sqlString = "select GovID, Firstname, Surname from governor";
        thisError = CG41App.dbObject.getRecordSetBySelect(); //execute select
        if (thisError == 0) { //if no error
            try {
                //for the amount of records, add the governors to the combo box
                for (i = 0; i < numRecords; i++) {
                    CG41App.dbObject.rs.next();
                    governor = CG41App.dbObject.rs.getString(1) + ", "
                            + CG41App.dbObject.rs.getString(2) + " "
                            + CG41App.dbObject.rs.getString(3); //create governor string
                    compGovCombox.addItem(governor); //add governor
                }
            } catch (SQLException ex) {
                // Show errors in console
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());
                thisError = ex.getErrorCode();

                UserMessageBox MyMessage = new UserMessageBox();
                MyMessage.setMessage("SQLException: " + ex.getMessage());
                MyMessage.setVisible(true);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        compGovLbl = new javax.swing.JLabel();
        compGovCombox = new javax.swing.JComboBox();
        coursesByGovernor = new javax.swing.JLabel();
        compCourseCombox = new javax.swing.JComboBox();
        exitBtn = new javax.swing.JButton();
        removeCompCourseBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cg41.CG41App.class).getContext().getResourceMap(RemoveCompletedCourse.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        compGovLbl.setText(resourceMap.getString("compGovLbl.text")); // NOI18N
        compGovLbl.setName("compGovLbl"); // NOI18N

        compGovCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-" }));
        compGovCombox.setName("compGovCombox"); // NOI18N
        compGovCombox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                compGovComboxItemStateChanged(evt);
            }
        });

        coursesByGovernor.setText(resourceMap.getString("coursesByGovernor.text")); // NOI18N
        coursesByGovernor.setName("coursesByGovernor"); // NOI18N

        compCourseCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-" }));
        compCourseCombox.setName("compCourseCombox"); // NOI18N

        exitBtn.setText(resourceMap.getString("exitBtn.text")); // NOI18N
        exitBtn.setName("exitBtn"); // NOI18N
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        removeCompCourseBtn.setText(resourceMap.getString("removeCompCourseBtn.text")); // NOI18N
        removeCompCourseBtn.setName("removeCompCourseBtn"); // NOI18N
        removeCompCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCompCourseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(coursesByGovernor)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(compGovCombox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(compCourseCombox, javax.swing.GroupLayout.Alignment.LEADING, 0, 230, Short.MAX_VALUE))
                            .addComponent(compGovLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(89, 89, 89))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(removeCompCourseBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(exitBtn)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(compGovLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compGovCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(coursesByGovernor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compCourseCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitBtn)
                    .addComponent(removeCompCourseBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Method used to close the window on button click
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        dispose();
}//GEN-LAST:event_exitBtnActionPerformed
    /**
     * When the remove button is pressed, it will proceed to remove the completed
     * course selected from the database
     */
    private void removeCompCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCompCourseBtnActionPerformed
        myLocalString = ""; //reset used variables
        myGov = "";
        thisError = 0;
        boolean removeCompCourse = false;
        //check to see if the user has selected a governor
        if(compGovCombox.getSelectedItem().toString().equals("-")){
            removeCompCourse = false;
            //show error
            UserMessageBox MyMessage = new UserMessageBox();
            MyMessage.setTitle("Error");
            MyMessage.setMessage("Please select a governor to seach by.");
            MyMessage.setVisible(true);
        }//if they've selected a govenor, but not a course then
        else if(compCourseCombox.getSelectedItem().toString().equals("-")){
            removeCompCourse = false;
            //show error
            UserMessageBox MyMessage = new UserMessageBox();
            MyMessage.setTitle("Error");
            MyMessage.setMessage("Please select a completed course to delete.");
            MyMessage.setVisible(true);
        }else{
            //set up a confirmation box to ensure the user wants to continue
            UserConfirmationBox userConfirm = new UserConfirmationBox(this, true);
            userConfirm.setMessage("Removing Completed Course:\n"
                    + "The completed course that you wish to\nremove is:\n"
                    + compCourseCombox.getSelectedItem().toString()
                    + ".\nThis course was completed by:\n"
                    + compGovCombox.getSelectedItem().toString()
                    + ".\nIf you delete this completed course,\n"
                    + "nothing else will be deleted.\n"
                    + "Are you sure you want to continue?");
            userConfirm.setVisible(true);
            removeCompCourse = userConfirm.removeConfirmation; //take the result from the confirm window
            userConfirm.dispose(); //make sure we close it
            if(removeCompCourse == false) { //if they don't want to delete
                UserMessageBox MyMessage = new UserMessageBox();
                MyMessage.setMessage("The Completed Course:\n"
                        + compCourseCombox.getSelectedItem().toString()
                        + ".\nWas not removed.");
                MyMessage.setVisible(true);
            }
        }
        if (removeCompCourse == true) { //if they confirm they want to delete
            myCompCourse = compCourseCombox.getSelectedItem().toString(); //get Completed Course info
            myCompCourseArray = myCompCourse.split(","); //split the completed course
            myLocalString = "delete from coursetaken where TakenID=" + myCompCourseArray[0];
            CG41App.dbObject2.sqlString = myLocalString; //set the SQL string
            thisError = CG41App.dbObject2.deleteRecord(); //execute the query

            //set the selected index of each combo box to dash
            compGovCombox.setSelectedIndex(0);
            compCourseCombox.setSelectedIndex(0);

            // Report completiton to the user
            if(thisError == 0){
                UserMessageBox MyMessage = new UserMessageBox ();
                MyMessage.setMessage ("Completed Course Successfully Deleted");
                MyMessage.setVisible (true);
            }
            else{
                UserMessageBox MyMessage = new UserMessageBox ();
                MyMessage.setMessage ("There was an Error deleting the completed course.");
                MyMessage.setVisible (true);
            }
        }
    }//GEN-LAST:event_removeCompCourseBtnActionPerformed
    /**
     * As the governor combo box changes state by the user's control, the
     * completed course combo box should load the courses completed by the
     * selected governor
     */
        private void compGovComboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_compGovComboxItemStateChanged
            myLocalString = ""; //rest variables
            myGov = "";
            thisError = 0;

            //reset the complete course combo box
            compCourseCombox.removeAllItems();
            compCourseCombox.addItem("-");

            myGov = compGovCombox.getSelectedItem().toString(); //get Gov info
            myGovArray = myGov.split(","); //split it to get the id
            myLocalString = "select COUNT(*) from coursetaken where GovID= '"
                    + myGovArray[0] + "'"; //create mysql query
            CG41App.dbObject.sqlString = myLocalString; //set SQL string
            thisError = CG41App.dbObject.getCountBySelect(); //execute count

            numRecords = CG41App.dbObject.NumberOfRecords; //save number of records

            //Create SQL statement to find all the courses taken where only the
            //governor ID appears
            CG41App.dbObject.sqlString =
                    "select TakenID, GovID, CourseID, DateTaken from coursetaken"
                    + " where GovID= '" + myGovArray[0] + "'";
            // Execute the request
            thisError = CG41App.dbObject.getRecordSetBySelect();
            if (thisError == 0) { //if no error, continue
                try {
                    while (CG41App.dbObject.rs.next()) { // For each record
                        courseID = CG41App.dbObject.rs.getInt("CourseID");
                        //where getCourseName is called, it will return the course name of the taken course
                        compCourseEntry = CG41App.dbObject.rs.getString("TakenID") + ", "
                                //+ CG41App.dbObject.rs.getString("GovID") + ", "
                                + getCourseName(courseID) + ", "
                                + CG41App.dbObject.rs.getString("DateTaken");
                        compCourseCombox.addItem(compCourseEntry); //add item
                    }
                } catch (SQLException ex) {
                    // Show errors in console
                    System.out.println("SQLException: " + ex.getMessage());
                    System.out.println("SQLState: " + ex.getSQLState());
                    System.out.println("VendorError: " + ex.getErrorCode());
                    thisError = ex.getErrorCode();

                    UserMessageBox MyMessage = new UserMessageBox();
                    MyMessage.setMessage("SQLException: " + ex.getMessage());
                    MyMessage.setVisible(true);
                }
            }
        }//GEN-LAST:event_compGovComboxItemStateChanged

        /**
         * getCourseName will take a given courseID and find the course name
         * linked to the course ID form the database and return it as a string
         */
    public String getCourseName(int courseInID) {
        myLocalString = ""; //reset variables
        myLocalError = false;
        thisError2 = 0;
        //set select SQL statement
        myLocalString = "select * from course where CourseID = '"
                + courseInID + "'";
        CG41App.dbObject2.sqlString = myLocalString; //set the string
        thisError2 = CG41App.dbObject2.getRecordSetBySelect(); //execute query
        try { //get the course name from the record set
            CG41App.dbObject2.rs.next(); 
            courseName = CG41App.dbObject2.rs.getString("CourseName");
        } catch (SQLException ex) {
            // Show errors in console
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            thisError2 = ex.getErrorCode();
            UserMessageBox MyMessage = new UserMessageBox();
            MyMessage.setMessage("SQLException: " + ex.getMessage());
            MyMessage.setVisible(true);
        }
        return courseName;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RemoveCompletedCourse().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox compCourseCombox;
    private javax.swing.JComboBox compGovCombox;
    private javax.swing.JLabel compGovLbl;
    private javax.swing.JLabel coursesByGovernor;
    private javax.swing.JButton exitBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton removeCompCourseBtn;
    // End of variables declaration//GEN-END:variables
}
