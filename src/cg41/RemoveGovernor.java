package cg41;

import java.sql.SQLException;

public class RemoveGovernor extends javax.swing.JFrame {

    int thisError, numRecords, i;
    String governor, myLocalString, myGovArray[], myGov;
    boolean removeGovernor;

    /** Creates new form RemoveCompletedCourse */
    public RemoveGovernor() {
        initComponents();
        loadGovernors();
    }

    /**
     * Method used to load the governors into the combo box
     */
    private void loadGovernors() {
        CG41App.dbObject.sqlString = "select COUNT(*) from governor"; //count governors
        thisError = CG41App.dbObject.getCountBySelect(); //execute
        numRecords = CG41App.dbObject.NumberOfRecords;
        CG41App.dbObject.sqlString = "select GovID, Firstname, Surname from governor";
        thisError = CG41App.dbObject.getRecordSetBySelect(); //execute query
        if (thisError == 0) { //as long as there is no error
            try {
                for (i = 0; i < numRecords; i++) {
                    CG41App.dbObject.rs.next(); //concatonate a governor string
                    governor = CG41App.dbObject.rs.getString(1) + ", "
                            + CG41App.dbObject.rs.getString(2) + " "
                            + CG41App.dbObject.rs.getString(3);
                    governorCombox.addItem(governor); //add it to the combobox
                }
            } catch (SQLException ex) {
                // Show errors in console
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());
                thisError = ex.getErrorCode();

                UserMessageBox MyMessage = new UserMessageBox();
                MyMessage.setMessage("SQLException: " + ex.getMessage());
                MyMessage.setVisible(true);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        governorCombox = new javax.swing.JComboBox();
        exitBtn = new javax.swing.JButton();
        removeGovernorBtn = new javax.swing.JButton();
        hintLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cg41.CG41App.class).getContext().getResourceMap(RemoveGovernor.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        governorCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-" }));
        governorCombox.setName("governorCombox"); // NOI18N

        exitBtn.setText(resourceMap.getString("exitBtn.text")); // NOI18N
        exitBtn.setName("exitBtn"); // NOI18N
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        removeGovernorBtn.setText(resourceMap.getString("removeGovernorBtn.text")); // NOI18N
        removeGovernorBtn.setName("removeGovernorBtn"); // NOI18N
        removeGovernorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeGovernorBtnActionPerformed(evt);
            }
        });

        hintLbl.setText(resourceMap.getString("hintLbl.text")); // NOI18N
        hintLbl.setName("hintLbl"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(removeGovernorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitBtn))
                    .addComponent(governorCombox, 0, 289, Short.MAX_VALUE)
                    .addComponent(hintLbl))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(hintLbl)
                .addGap(7, 7, 7)
                .addComponent(governorCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitBtn)
                    .addComponent(removeGovernorBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method used to close the window on button click
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        dispose();
}//GEN-LAST:event_exitBtnActionPerformed
    
    /**
     * Removes the selected governor from the database on press of button
     */
    private void removeGovernorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeGovernorBtnActionPerformed
        removeGovernor = false;
        //Create a user confirmation box with a message to ensure that
        //the user wants to delete the selected governor
        if (governorCombox.getSelectedItem().toString().equals("-")) {
            removeGovernor = false;

            UserMessageBox MyMessage = new UserMessageBox();
            MyMessage.setTitle("Error");
            MyMessage.setMessage("Please select a governor to remove.");
            MyMessage.setVisible(true);
        } else {
            //set up a confirmation box to ensure the user wants to continue
            UserConfirmationBox userConfirm = new UserConfirmationBox(this, true);
            userConfirm.setMessage("Removing Governor:\n"
                    + "The governor that you wish to remove is:\n"
                    + governorCombox.getSelectedItem().toString()
                    + ".\nUpon deleting this governor,\nany completed courses they have"
                    + " completed\nwill alse be removed.\nAre you sure you want to con"
                    + "tinue?");
            userConfirm.setVisible(true);
            removeGovernor = userConfirm.removeConfirmation; //take the result from the confirm window
            userConfirm.dispose(); //make sure we close it
            if(removeGovernor == false) { //if they don't want to delete
                UserMessageBox MyMessage = new UserMessageBox();
                MyMessage.setMessage("The Governor:\n"
                        + governorCombox.getSelectedItem().toString()
                        + ".\nWas not removed.");
                MyMessage.setVisible(true);
            }
        }
        if (removeGovernor == true) { //if they confirm they want to delete
            myLocalString = ""; //set all used variables to null
            myGov = "";
            thisError = 0;

            myGov = governorCombox.getSelectedItem().toString(); //get Completed Course info
            myGovArray = myGov.split(","); //split the string by commas
            myLocalString = "delete from governor where GovID=" + myGovArray[0];
            CG41App.dbObject.sqlString = myLocalString; //set MySQL string
            thisError = CG41App.dbObject.deleteRecord(); //execute MySQL String

            governorCombox.removeAllItems(); //reset the goverors after removing
            governorCombox.addItem("-");     //the gover ready to remove another one
            governorCombox.setSelectedIndex(0);
            loadGovernors();

            // Report completiton to the user
            if (thisError == 0) {
                UserMessageBox MyMessage = new UserMessageBox();
                MyMessage.setTitle("Governor Removed");
                MyMessage.setMessage("The Governor:\n" + myGov + ",\nwas successfully deleted");
                MyMessage.setVisible(true);
            } else {
                UserMessageBox MyMessage = new UserMessageBox();
                MyMessage.setTitle("Governor Remove Unsuccessful");
                MyMessage.setMessage("There was an Error deleting the Governor.");
                MyMessage.setVisible(true);
            }
        }  
}//GEN-LAST:event_removeGovernorBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RemoveGovernor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitBtn;
    private javax.swing.JComboBox governorCombox;
    private javax.swing.JLabel hintLbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton removeGovernorBtn;
    // End of variables declaration//GEN-END:variables
}
